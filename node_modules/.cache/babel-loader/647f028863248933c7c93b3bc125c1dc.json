{"ast":null,"code":"import app from 'firebase/app';\nimport 'firebase/database';\nimport 'firebase/auth';\nimport 'firebase/storage'; //Configurações do seu projeto\n\nlet firebaseConfig = {\n  apiKey: \"\",\n  authDomain: \"\",\n  databaseURL: \"\",\n  projectId: \"\",\n  storageBucket: \"\",\n  messagingSenderId: \"\",\n  appId: \"\"\n};\n\nclass Firebase {\n  constructor() {\n    app.initializeApp(firebaseConfig); //Referenciando a database para acessar em outros locais\n\n    this.app = app.database();\n    this.storage = app.storage();\n  }\n\n  login(email, password) {\n    return app.auth().signInWithEmailAndPassword(email, password);\n  }\n\n  logout() {\n    return app.auth().signOut();\n  }\n\n  async register(nome, email, password) {\n    await app.auth().createUserWithEmailAndPassword(email, password);\n    const uid = app.auth().currentUser.uid;\n    return app.database().ref('usuarios').child(uid).set({\n      nome: nome\n    });\n  }\n\n  isInitialized() {\n    return new Promise(resolve => {\n      app.auth().onAuthStateChanged(resolve);\n    });\n  }\n\n  getCurrent() {\n    return app.auth().currentUser && app.auth().currentUser.email;\n  }\n\n  getCurrentUid() {\n    return app.auth().currentUser && app.auth().currentUser.uid;\n  }\n\n  async getUserName(callback) {\n    if (!app.auth().currentUser) {\n      return null;\n    }\n\n    const uid = app.auth().currentUser.uid;\n    await app.database().ref('usuarios').child(uid).once('value').then(callback);\n  }\n\n}\n\nexport default new Firebase();","map":{"version":3,"sources":["/home/maicon/Área de Trabalho/Area de Trabalho/Projetos/react-estudo/blog/src/firebase.js"],"names":["app","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Firebase","constructor","initializeApp","database","storage","login","email","password","auth","signInWithEmailAndPassword","logout","signOut","register","nome","createUserWithEmailAndPassword","uid","currentUser","ref","child","set","isInitialized","Promise","resolve","onAuthStateChanged","getCurrent","getCurrentUid","getUserName","callback","once","then"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAO,mBAAP;AACA,OAAO,eAAP;AACA,OAAO,kBAAP,C,CAEI;;AACA,IAAIC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,EADW;AAEnBC,EAAAA,UAAU,EAAE,EAFO;AAGnBC,EAAAA,WAAW,EAAE,EAHM;AAInBC,EAAAA,SAAS,EAAE,EAJQ;AAKnBC,EAAAA,aAAa,EAAE,EALI;AAMnBC,EAAAA,iBAAiB,EAAE,EANA;AAOnBC,EAAAA,KAAK,EAAE;AAPY,CAArB;;AAUJ,MAAMC,QAAN,CAAc;AACZC,EAAAA,WAAW,GAAE;AACXV,IAAAA,GAAG,CAACW,aAAJ,CAAkBV,cAAlB,EADW,CAGX;;AACA,SAAKD,GAAL,GAAWA,GAAG,CAACY,QAAJ,EAAX;AAEA,SAAKC,OAAL,GAAeb,GAAG,CAACa,OAAJ,EAAf;AACD;;AAEDC,EAAAA,KAAK,CAACC,KAAD,EAAQC,QAAR,EAAiB;AACpB,WAAOhB,GAAG,CAACiB,IAAJ,GAAWC,0BAAX,CAAsCH,KAAtC,EAA6CC,QAA7C,CAAP;AACD;;AAEDG,EAAAA,MAAM,GAAE;AACN,WAAOnB,GAAG,CAACiB,IAAJ,GAAWG,OAAX,EAAP;AACD;;AAED,QAAMC,QAAN,CAAeC,IAAf,EAAqBP,KAArB,EAA4BC,QAA5B,EAAqC;AACnC,UAAMhB,GAAG,CAACiB,IAAJ,GAAWM,8BAAX,CAA0CR,KAA1C,EAAiDC,QAAjD,CAAN;AAEA,UAAMQ,GAAG,GAAGxB,GAAG,CAACiB,IAAJ,GAAWQ,WAAX,CAAuBD,GAAnC;AAEA,WAAOxB,GAAG,CAACY,QAAJ,GAAec,GAAf,CAAmB,UAAnB,EAA+BC,KAA/B,CAAqCH,GAArC,EAA0CI,GAA1C,CAA8C;AACnDN,MAAAA,IAAI,EAAEA;AAD6C,KAA9C,CAAP;AAID;;AAEDO,EAAAA,aAAa,GAAE;AACX,WAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAG;AACzB/B,MAAAA,GAAG,CAACiB,IAAJ,GAAWe,kBAAX,CAA8BD,OAA9B;AACH,KAFM,CAAP;AAGH;;AAEDE,EAAAA,UAAU,GAAE;AACV,WAAOjC,GAAG,CAACiB,IAAJ,GAAWQ,WAAX,IAA0BzB,GAAG,CAACiB,IAAJ,GAAWQ,WAAX,CAAuBV,KAAxD;AACD;;AAEDmB,EAAAA,aAAa,GAAE;AACb,WAAOlC,GAAG,CAACiB,IAAJ,GAAWQ,WAAX,IAA0BzB,GAAG,CAACiB,IAAJ,GAAWQ,WAAX,CAAuBD,GAAxD;AACD;;AAED,QAAMW,WAAN,CAAkBC,QAAlB,EAA2B;AACzB,QAAG,CAACpC,GAAG,CAACiB,IAAJ,GAAWQ,WAAf,EAA2B;AACzB,aAAO,IAAP;AACD;;AAED,UAAMD,GAAG,GAAGxB,GAAG,CAACiB,IAAJ,GAAWQ,WAAX,CAAuBD,GAAnC;AACA,UAAMxB,GAAG,CAACY,QAAJ,GAAec,GAAf,CAAmB,UAAnB,EAA+BC,KAA/B,CAAqCH,GAArC,EACLa,IADK,CACA,OADA,EACSC,IADT,CACcF,QADd,CAAN;AAGD;;AApDW;;AAwDd,eAAe,IAAI3B,QAAJ,EAAf","sourcesContent":["import app from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/auth';\r\nimport 'firebase/storage';\r\n\r\n    //Configurações do seu projeto\r\n    let firebaseConfig = {\r\n      apiKey: \"\",\r\n      authDomain: \"\",\r\n      databaseURL: \"\",\r\n      projectId: \"\",\r\n      storageBucket: \"\",\r\n      messagingSenderId: \"\",\r\n      appId: \"\"\r\n    };\r\n\r\nclass Firebase{\r\n  constructor(){\r\n    app.initializeApp(firebaseConfig);\r\n\r\n    //Referenciando a database para acessar em outros locais\r\n    this.app = app.database();\r\n\r\n    this.storage = app.storage();\r\n  }\r\n\r\n  login(email, password){\r\n    return app.auth().signInWithEmailAndPassword(email, password)\r\n  }\r\n\r\n  logout(){\r\n    return app.auth().signOut();\r\n  }\r\n\r\n  async register(nome, email, password){\r\n    await app.auth().createUserWithEmailAndPassword(email, password)\r\n\r\n    const uid = app.auth().currentUser.uid;\r\n\r\n    return app.database().ref('usuarios').child(uid).set({\r\n      nome: nome\r\n    })\r\n\r\n  }\r\n\r\n  isInitialized(){\r\n      return new Promise(resolve =>{\r\n          app.auth().onAuthStateChanged(resolve);\r\n      })\r\n  }\r\n\r\n  getCurrent(){\r\n    return app.auth().currentUser && app.auth().currentUser.email\r\n  }\r\n\r\n  getCurrentUid(){\r\n    return app.auth().currentUser && app.auth().currentUser.uid\r\n  }\r\n\r\n  async getUserName(callback){\r\n    if(!app.auth().currentUser){\r\n      return null;\r\n    }\r\n\r\n    const uid = app.auth().currentUser.uid;\r\n    await app.database().ref('usuarios').child(uid)\r\n    .once('value').then(callback);\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default new Firebase();"]},"metadata":{},"sourceType":"module"}